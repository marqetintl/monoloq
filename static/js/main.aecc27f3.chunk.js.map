{"version":3,"sources":["Monoloq/entries/utils.jsx","Monoloq/ui/textareax/src/index.jsx","Monoloq/entries/forms.jsx","Monoloq/entries/Entry.jsx","Monoloq/entries/index.jsx","Monoloq/index.jsx","utils.jsx","Monoloq/settings/index.jsx","reportWebVitals.js","index.jsx"],"names":["LINES","entriesActions","dispatch","Promise","resolve","payload","localStorage","getItem","JSON","parse","initialState","entries","setItem","stringify","type","entry","getStore","state","newState","slug","status","TextareaX","forwardRef","require","props","ref","value","onChange","placeholder","rest","style","className","id","EntryInput","maxLength","required","EntryAddForm","useDispatch","useState","text","setText","onSubmit","e","preventDefault","uuid","trim","replace","dt","Date","then","target","Entry","data","byDate","Map","EntriesView","useSelector","useEffect","clear","Object","values","forEach","date","key","formatDateToStr","has","set","get","push","map","Entries","formatDate","note","settings","created","theme","SettingsView","lazy","Monoloq","role","fallback","path","component","reducers","action","settingsReducer","IS_DEV","process","format","weekday","month","day","date_time","Intl","DateTimeFormat","dd","getDate","mm","getMonth","getFullYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","appReducer","combineReducers","middleware","thunk","enhancers","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","appStore","createStore","compose","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.aecc27f3.chunk.js","sourcesContent":["import { initialState } from \"..\";\n\nconst LINES = /(\\n|\\r|\\r\\n){2,}/g;\n\nexport const cleanText = (value) => {\n    if (value) value = value.trim().replace(LINES, \"\\n\\n\");\n    return value;\n};\n\nexport const entriesActions = {\n    list: () => (dispatch) =>\n        new Promise((resolve) => {\n            let payload = localStorage.getItem(\"entries\");\n            if (!payload) {\n                payload = initialState.entries;\n                localStorage.setItem(\"entries\", JSON.stringify(payload));\n            } else {\n                payload = JSON.parse(payload);\n            }\n\n            dispatch({ type: \"SET_ENTRIES\", payload });\n            return resolve(payload);\n        }),\n\n    post: (entry) => (dispatch, getStore) =>\n        new Promise((resolve) => {\n            const state = getStore().entries;\n            const newState = { ...state, [`${entry.slug}`]: entry };\n            localStorage.setItem(\"entries\", JSON.stringify(newState));\n\n            dispatch({ type: \"SET_ENTRIES\", payload: newState });\n\n            resolve({ ...entry, status: 1 });\n        }),\n};\n\nexport const entriesReducer = (state = initialState.entries, action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n        case \"SET_ENTRIES\":\n            return { ...payload };\n\n        case \"CLEAR_ENTRIES\":\n            return { ...initialState.entries };\n\n        default:\n            return { ...state };\n    }\n};\n","import \"./style.scss\";\nimport PropTypes from \"prop-types\";\n\nconst { forwardRef } = require(\"react\");\n\nconst propTypes = {\n    id: PropTypes.string,\n    className: PropTypes.string,\n    ref: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({ current: PropTypes.any })]),\n\n    value: PropTypes.string,\n    required: PropTypes.bool,\n\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onKeyUp: PropTypes.func,\n\n    style: PropTypes.object,\n    placeholder: PropTypes.string,\n};\n\nconst TextareaX = forwardRef((props, ref) => {\n    const { value, onChange, placeholder = \"Start typing ...\", ...rest } = props;\n    const style = props.style;\n\n    return (\n        <div className=\"TextareaX\">\n            <span id=\"Mirror\" {...{ style }}>{`${value}\\n`}</span>\n\n            <div className=\"Input\">\n                <textarea {...rest} {...{ value, onChange, placeholder, style }} ref={ref} />\n            </div>\n        </div>\n    );\n});\n\nTextareaX.propTypes = propTypes;\n\nexport default TextareaX;\n","import React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { useDispatch } from \"react-redux\";\n\nimport { entriesActions, cleanText } from \"./utils\";\n\nimport TextareaX from \"../ui/textareax/src\";\n\nconst EntryInput = (props) => {\n    const { placeholder = \"What are your thoughts ...\", maxLength = 280 } = props;\n\n    return <TextareaX {...props} {...{ placeholder, maxLength }} required />;\n};\n\nexport default function EntryAddForm(props) {\n    const dispatch = useDispatch();\n    const [text, setText] = useState(\"\");\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const payload = { slug: uuid(), text: cleanText(text), dt: new Date() };\n        dispatch(entriesActions.post(payload)).then(({ status }) => {\n            if (!status) return;\n\n            setText(\"\");\n        });\n    };\n\n    return (\n        <div id=\"EntryAddForm\">\n            <form onSubmit={handleSubmit} className=\"entries-add-form\">\n                <div className=\"entries-add-form-input\">\n                    <EntryInput value={text} onChange={(e) => setText(e.target.value)} />\n                </div>\n\n                <div className=\"entries-add-form-submit\">\n                    <button type=\"submit\">Submit</button>\n                    {/* <IconButton type=\"submit\" Icon={ArrowUpCircle} /> */}\n                </div>\n            </form>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function Entry({ data = {}, ...props }) {\n    return (\n        <div className=\"entry\">\n            <div className=\"entry-text\">{data.text}</div>\n            <div className=\"entry-meta\"></div>\n        </div>\n    );\n}\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport EntryAddForm from \"./forms\";\nimport { entriesActions } from \"./utils\";\n\nimport \"./style.scss\";\nimport { formatDate, formatDateToStr } from \"../../utils\";\nimport Entry from \"./Entry\";\n\nconst byDate = new Map();\n\nexport default function EntriesView(props) {\n    const dispatch = useDispatch();\n    const entries = useSelector((state) => state.entries);\n\n    useEffect(() => {\n        dispatch(entriesActions.list());\n    }, [dispatch]);\n\n    byDate.clear();\n    Object.values(entries).forEach((e) => {\n        const date = new Date(e.dt);\n        e = { ...e, date };\n        const key = formatDateToStr(date);\n\n        if (!byDate.has(key)) {\n            byDate.set(key, { date, entries: [] });\n        }\n\n        const data = byDate.get(key);\n        data.entries.push(e);\n        byDate.set(key, data);\n    });\n\n    return (\n        <section id=\"EntriesView\" className=\"entries\">\n            <div className=\"entries-days\">\n                {[...byDate.values()].map((data) => (\n                    <Entries {...{ data, dispatch }} key={`${data.date}`} />\n                ))}\n            </div>\n\n            <footer className=\"entries-footer\">\n                <EntryAddForm />\n            </footer>\n        </section>\n    );\n}\n\nconst Entries = ({ data = { entries: [] }, dispatch }) => {\n    return (\n        <div className=\"entries-day\">\n            <div className=\"WeekDay\">{formatDate(data.date)}</div>\n\n            <div className=\"Notes\">\n                {data.entries.map((note) => (\n                    <Entry {...{ dispatch }} data={note} key={note.slug} />\n                ))}\n            </div>\n        </div>\n    );\n};\n","import { lazy, Suspense } from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport EntriesView from \"./entries\";\nimport { entriesReducer } from \"./entries/utils\";\nimport { settingsReducer } from \"./settings\";\n\nimport \"./scss/main.scss\";\n\nexport const initialState = {\n    entries: {},\n    settings: {\n        created: null,\n        theme: \"light\",\n    },\n};\n\nconst SettingsView = lazy(() => import(\"./settings\"));\n\nexport default function Monoloq(props) {\n    return (\n        <div id=\"Monoloq\">\n            <div className=\"mn\">\n                <header className=\"mn-header\">header</header>\n\n                <section className=\"mn-body\">\n                    <main className=\"mn-main\" role=\"main\">\n                        <Suspense fallback={<div>loading ...</div>}>\n                            <Switch>\n                                <Route path=\"/settings/\" component={SettingsView} />\n                                <Route path=\"/\" component={EntriesView} />\n                            </Switch>\n                        </Suspense>\n                    </main>\n                    {/* <footer className=\"mn-footer\">footer</footer> */}\n                </section>\n            </div>\n        </div>\n    );\n}\n\nexport const reducers = {\n    entries: entriesReducer,\n    settings: settingsReducer,\n};\n","export const IS_DEV = process.env.NODE_ENV !== \"production\";\n\nexport const formatDate = (date, format = { weekday: \"short\", month: \"long\", day: \"numeric\" }) => {\n    const date_time = new Intl.DateTimeFormat(\"en-US\", {\n        ...format,\n        //    weekday: \"short\",\n        //    month: \"long\",\n        //    day: \"numeric\",\n        // hour: \"numeric\",\n        // minute: \"numeric\",\n        // year: 'numeric',\n    });\n    return date_time.format(new Date(date));\n};\n\nexport const formatDateToStr = (date) => {\n    // if (!isDate(date)) return \"\";\n\n    var dd = date.getDate();\n    var mm = date.getMonth() + 1; //January is 0!\n    var yyyy = date.getFullYear();\n\n    if (dd < 10) {\n        dd = \"0\" + dd;\n    }\n    if (mm < 10) {\n        mm = \"0\" + mm;\n    }\n\n    return yyyy + \"-\" + mm + \"-\" + dd;\n};\n","import React from \"react\";\nimport { initialState } from \"..\";\n\nexport default function SettingsView() {\n    return <div>settings</div>;\n}\n\nexport const settingsReducer = (state = initialState.settings, action = {}) => {\n    const { type, payload = {} } = action;\n\n    switch (type) {\n        case \"RESET_SETTINGS\":\n            return { ...state };\n\n        case \"SET_THEME\":\n            return { ...state, ...payload };\n\n        default:\n            return state;\n    }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\n\nimport App, { reducers, initialState } from \"./Monoloq\";\nimport { IS_DEV } from \"./utils\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst appReducer = combineReducers({ ...reducers });\n\n// ==> STORE\n\nconst middleware = [thunk];\n\nlet enhancers = [applyMiddleware(...middleware)];\nif (IS_DEV) {\n    enhancers = [\n        ...enhancers,\n        window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,\n    ];\n}\n\nexport const appStore = createStore(appReducer, initialState, compose(...enhancers));\n\n// ==>  ROOT\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={appStore}>\n                <App />\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}