{"version":3,"sources":["Monoloq/todos/index.jsx"],"names":["TodosView","props","useState","Date","currDate","todo","setTodo","dispatch","useDispatch","todos","useSelector","state","formatDateToStr","useEffect","todosActions","byDate","id","className","WeekSelector","map","item","Todo","data","key","slug","onSubmit","e","preventDefault","post","then","status","required","type","value","onChange","target","maxLength","placeholder","tabIndex","isDone","setDone","getClassName","name","checked","newValue","patch","Error","catch","err","console","log"],"mappings":"wPAOe,SAASA,EAAUC,GAC9B,MAAmBC,mBAAS,IAAIC,MAAzBC,EAAP,oBACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEMC,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SAAOG,YAAgBR,KAAc,GAEhFS,qBAAU,WACNN,EAASO,IAAaC,OAAO,IAAIZ,SAClC,CAACI,IASJ,OACI,sBAAKS,GAAG,YAAR,UACI,sBAAKC,UAAU,QAAf,UACI,cAACC,EAAD,IAEA,qBAAKD,UAAU,cAAf,SACKR,EAAMU,KAAI,SAACC,GAAD,OACP,wBAACC,EAAD,CAAMC,KAAMF,EAAYb,WAAYgB,IAAKH,EAAKI,eAK1D,qBAAKP,UAAU,kBAAf,SACI,uBAAMQ,SApBG,SAACC,GAClBA,EAAEC,iBACFpB,EAASO,IAAac,KAAKvB,IAAOwB,MAAK,YAAgB,EAAbC,OACtCxB,EAAQ,QAiB0BW,UAAU,gBAAxC,UACI,uBACIc,UAAQ,EACRC,KAAK,OACLC,MAAO5B,EACP6B,SAAU,SAACR,GAAD,OAAOpB,EAAQoB,EAAES,OAAOF,QAClCG,UAAW,IACXC,YAAY,0BACZC,SAAU,IAEd,qBAAKrB,UAAU,MAAf,SACI,uBAAOe,KAAK,SAASC,MAAM,mBAQnD,IAAMZ,EAAO,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMf,EAAyB,EAAzBA,SAClB,GAD2C,mCACjBL,mBAASoB,EAAKiB,SAAU,IAAlD,mBAAOA,EAAP,KAAeC,EAAf,KAEA,GAAKlB,EAAKE,KAAV,CAcA,OACI,sBAAKP,UAAWwB,YAAa,CAAC,OAAQF,GAAU,SAAhD,UACI,qBAAKtB,UAAU,QAAf,SAAwBK,EAAKW,QAC7B,uBAAOD,KAAK,WAAWU,KAAK,SAASC,QAASJ,EAAQL,SAfvC,SAACR,GACpB,IAAMkB,GAAYL,EAClBhC,EAASO,IAAa+B,MAAMvB,EAAM,CAAEiB,OAAQK,KACvCf,MAAK,YACF,IADkB,EAAbC,OACQ,MAAM,IAAIgB,MAAM,wBAC7BN,EAAQI,MAEXG,OAAM,SAACC,GACJC,QAAQC,IAAIF,cAYtB9B,EAAe,SAACjB,GAClB,OAAO,qBAAKgB,UAAU,GAAf","file":"static/js/3.f2a79000.chunk.js","sourcesContent":["import { formatDateToStr, getClassName } from \"@miq/shared\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { todosActions } from \"./utils\";\n\nimport \"./todos.scss\";\n\nexport default function TodosView(props) {\n    const [currDate] = useState(new Date());\n    const [todo, setTodo] = useState(\"\");\n\n    const dispatch = useDispatch();\n    const todos = useSelector((state) => state.todos)[formatDateToStr(currDate)] || [];\n\n    useEffect(() => {\n        dispatch(todosActions.byDate(new Date()));\n    }, [dispatch]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        dispatch(todosActions.post(todo)).then(({ status }) => {\n            setTodo(\"\");\n        });\n    };\n\n    return (\n        <div id=\"TodosView\">\n            <div className=\"todos\">\n                <WeekSelector />\n\n                <div className=\"todos-items\">\n                    {todos.map((item) => (\n                        <Todo data={item} {...{ dispatch }} key={item.slug} />\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"viewport-footer\">\n                <form onSubmit={handleSubmit} className=\"todo-add-form\">\n                    <input\n                        required\n                        type=\"text\"\n                        value={todo}\n                        onChange={(e) => setTodo(e.target.value)}\n                        maxLength={200}\n                        placeholder=\"What do you have to do?\"\n                        tabIndex={1}\n                    />\n                    <div className=\"btn\">\n                        <input type=\"submit\" value=\"Save\" />\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nconst Todo = ({ data, dispatch, ...props }) => {\n    const [isDone, setDone] = useState(data.isDone || false);\n\n    if (!data.slug) return;\n\n    const toggleComplete = (e) => {\n        const newValue = !isDone;\n        dispatch(todosActions.patch(data, { isDone: newValue }))\n            .then(({ status }) => {\n                if (!status) throw new Error(\"Something went wrong\");\n                setDone(newValue);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <div className={getClassName([\"todo\", isDone && \"done\"])}>\n            <div className=\"value\">{data.value}</div>\n            <input type=\"checkbox\" name=\"isDone\" checked={isDone} onChange={toggleComplete} />\n        </div>\n    );\n};\n\nconst WeekSelector = (props) => {\n    return <div className=\"\">Week</div>;\n};\n"],"sourceRoot":""}