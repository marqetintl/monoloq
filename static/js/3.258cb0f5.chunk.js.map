{"version":3,"sources":["Monoloq/todos/index.jsx"],"names":["TodosView","props","useState","Date","currDate","setCurrDate","todo","setTodo","dispatch","useDispatch","todos","useSelector","state","formatDateToStr","useEffect","todosActions","byDate","id","className","WeekSelector","map","item","Todo","data","key","slug","onSubmit","e","preventDefault","fD","value","dt","post","then","status","required","type","onChange","target","maxLength","placeholder","tabIndex","isDone","setDone","getClassName","name","checked","newValue","patch","Error","catch","err","console","log","view","onDateClick","date","selected"],"mappings":"uPAOe,SAASA,EAAUC,GAC9B,MAAgCC,mBAAS,IAAIC,MAA7C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBH,mBAAS,IAAjC,mBAAOI,EAAP,KAAaC,EAAb,KAEMC,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SAAOG,YAAgBT,KAAc,GAEhFU,qBAAU,WACNN,EAASO,IAAaC,OAAOZ,MAC9B,CAACI,EAAUJ,IAUd,OACI,sBAAKa,GAAG,YAAR,UACI,sBAAKC,UAAU,QAAf,UACI,cAACC,EAAD,CAAoBf,WAAUC,gBAE9B,qBAAKa,UAAU,cAAf,SACKR,EAAMU,KAAI,SAACC,GAAD,OACP,wBAACC,EAAD,CAAMC,KAAMF,EAAYb,WAAYgB,IAAKH,EAAKI,eAK1D,qBAAKP,UAAU,kBAAf,SACI,uBAAMQ,SArBG,SAACC,GAClBA,EAAEC,iBACF,IAAIC,EAAK,CAAEC,MAAOxB,EAAMyB,GAAI3B,GAC5BI,EAASO,IAAaiB,KAAKH,IAAKI,MAAK,YAAgB,EAAbC,OACpC3B,EAAQ,QAiB0BW,UAAU,gBAAxC,UACI,uBACIiB,UAAQ,EACRC,KAAK,OACLN,MAAOxB,EACP+B,SAAU,SAACV,GAAD,OAAOpB,EAAQoB,EAAEW,OAAOR,QAClCS,UAAW,IACXC,YAAY,0BACZC,SAAU,IAEd,qBAAKvB,UAAU,MAAf,SACI,uBAAOkB,KAAK,SAASN,MAAM,mBAQnD,IAAMR,EAAO,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMf,EAAyB,EAAzBA,SAClB,GAD2C,mCACjBN,mBAASqB,EAAKmB,SAAU,IAAlD,mBAAOA,EAAP,KAAeC,EAAf,KAEA,GAAKpB,EAAKE,KAAV,CAcA,OACI,sBAAKP,UAAW0B,YAAa,CAAC,OAAQF,GAAU,SAAhD,UACI,qBAAKxB,UAAU,QAAf,SAAwBK,EAAKO,QAC7B,uBAAOM,KAAK,WAAWS,KAAK,SAASC,QAASJ,EAAQL,SAfvC,SAACV,GACpB,IAAMoB,GAAYL,EAClBlC,EAASO,IAAaiC,MAAMzB,EAAM,CAAEmB,OAAQK,KACvCd,MAAK,YACF,IADkB,EAAbC,OACQ,MAAM,IAAIe,MAAM,wBAC7BN,EAAQI,MAEXG,OAAM,SAACC,GACJC,QAAQC,IAAIF,cAYtBhC,EAAe,SAAClB,GAGlB,OACI,qBAAKiB,UAAU,GAAf,SACI,cAAC,IAAD,CAAUoC,KAAK,OAAOC,YAJd,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAcvD,EAAMI,YAAYmD,IAIIC,SAAUxD,EAAMG","file":"static/js/3.258cb0f5.chunk.js","sourcesContent":["import { formatDateToStr, getClassName, Calendar } from \"@miq/shared\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { todosActions } from \"./utils\";\n\nimport \"./todos.scss\";\n\nexport default function TodosView(props) {\n    const [currDate, setCurrDate] = useState(new Date());\n    const [todo, setTodo] = useState(\"\");\n\n    const dispatch = useDispatch();\n    const todos = useSelector((state) => state.todos)[formatDateToStr(currDate)] || [];\n\n    useEffect(() => {\n        dispatch(todosActions.byDate(currDate));\n    }, [dispatch, currDate]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let fD = { value: todo, dt: currDate };\n        dispatch(todosActions.post(fD)).then(({ status }) => {\n            setTodo(\"\");\n        });\n    };\n\n    return (\n        <div id=\"TodosView\">\n            <div className=\"todos\">\n                <WeekSelector {...{ currDate, setCurrDate }} />\n\n                <div className=\"todos-items\">\n                    {todos.map((item) => (\n                        <Todo data={item} {...{ dispatch }} key={item.slug} />\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"viewport-footer\">\n                <form onSubmit={handleSubmit} className=\"todo-add-form\">\n                    <input\n                        required\n                        type=\"text\"\n                        value={todo}\n                        onChange={(e) => setTodo(e.target.value)}\n                        maxLength={200}\n                        placeholder=\"What do you have to do?\"\n                        tabIndex={1}\n                    />\n                    <div className=\"btn\">\n                        <input type=\"submit\" value=\"Save\" />\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nconst Todo = ({ data, dispatch, ...props }) => {\n    const [isDone, setDone] = useState(data.isDone || false);\n\n    if (!data.slug) return;\n\n    const toggleComplete = (e) => {\n        const newValue = !isDone;\n        dispatch(todosActions.patch(data, { isDone: newValue }))\n            .then(({ status }) => {\n                if (!status) throw new Error(\"Something went wrong\");\n                setDone(newValue);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <div className={getClassName([\"todo\", isDone && \"done\"])}>\n            <div className=\"value\">{data.value}</div>\n            <input type=\"checkbox\" name=\"isDone\" checked={isDone} onChange={toggleComplete} />\n        </div>\n    );\n};\n\nconst WeekSelector = (props) => {\n    const setDate = ({ date }) => props.setCurrDate(date);\n\n    return (\n        <div className=\"\">\n            <Calendar view=\"week\" onDateClick={setDate} selected={props.currDate} />\n        </div>\n    );\n};\n"],"sourceRoot":""}